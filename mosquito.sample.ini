# --- Main configuration file for mosquito ---
# All parameters can be overriden with command arguments

[General]
# Overall info verbosity true-on, false-off
verbosity = false



[Trade]
# Valid values (polo, bittrex)
exchange = polo
# List of pairs that the ticker should be retrieved/monitored
# Valid values:
#              all - get ticker for ALL currencies
#              comma sepparated list of pairs, for example BTC_DGB
#              prefix_* - log all pairs with given prefix. For example BTC_* or  USDT_*
# all
pairs = BTC_ETH
# Buffer size in days (how many days of data samples we need to save in memory)
buffer_size = 30
# Step interval in minutes
# !! Supported intervals for Poloniex are 5, 15, 30, 120, 240, and 1440 minutes
ticker_size = 5
strategy = ema
# Currency towards which the balance will be calculated
root_report_currency = BTC
# Trade amount for a fixed BuySellMode (used only for BuySellMode.fixed)!!
# Current implementation works only on 1 pair type - for example BTC_*
fixed_trade_amount = 0.0015
# Prefetches data from history exchange ticker (feature should be only used for Paper and Live trading)
prefetch = true



[Report]
# Currency which will be plotted (!currently supported in single currency simulation only)
plot_pair = BTC_ETH


# ⋅⋅⋅⋅⋅⋅⋅ Mongo DB ⋅⋅⋅⋅⋅⋅⋅
[MongoDB]
db_url = localhost
db_port = 27017
db = mosquito



# ⋅⋅⋅⋅⋅⋅⋅ Exchanges ⋅⋅⋅⋅⋅⋅⋅
[Poloniex]
polo_api_key =
polo_secret = 
# fillOrKill, immediateOrCancel. (postOnly - not supported yet!)
polo_buy_order = immediateOrCancel
# fillOrKill, immediateOrCancel. (postOnly - not supported yet!)
polo_sell_order = immediateOrCancel
polo_txn_fee = 0.2



[Bittrex]
bittrex_api_key =
bittrex_secret =
bittrex_txn_fee = 0.25


# ⋅⋅⋅⋅⋅⋅⋅ Backtest ⋅⋅⋅⋅⋅⋅⋅
[Backtest]
# Backtest epoch start datetime
# backtest_from
# Backtest epoch end datetime
# backtest_to
# Number of history days the simulation should start from
backtest_hours = 10


# ⋅⋅⋅⋅⋅⋅⋅ Paper ⋅⋅⋅⋅⋅⋅⋅
[Paper]
# Set to false if you want to use fictive wallet (defined below)
use_real_wallet = false


# ⋅⋅⋅⋅⋅⋅⋅ Wallet ⋅⋅⋅⋅⋅⋅⋅
[Wallet]
# Comma separated list of currencies
# If left blank exchange will try to get data from defined Exchange wallet
wallet_currency=BTC, ETH
# Comma separated list of currency represented values
# If left blank exchange will try to get data from defined Exchange wallet
wallet_amount=1, 2