import pandas as pd
import configargparse


class Dojo:
    """
    Main module responsible for training
    """
    arg_parser = configargparse.get_argument_parser()

    def __init__(self):
        args = self.arg_parser.parse_known_args()[0]
        self.verbose = args.verbose

    def train(self, blueprint=None, automatic_search=True, models=None, minimum_score=0.7):
        """
        Trains input data by automatic_search (GA) or with given models
        :param blueprint: multi-currency features csv file (for example generated by blueprint module)
        :param automatic_search: automatically find the best models
        :param models: list of models to be used. If automatic_search is True, models will be included into model search
        :param minimum_score: minimum_score the model needs to have so that it is returned
        :return: list of best models with their score
        """
        if not blueprint:
            print("Required blueprint csv. argument value is missing, nothing to do here.")
            return

        print('Loading dataset')
        df_pair_groups = self.load_blueprint(blueprint)
        # Get trained models for every pair
        for pair, df in df_pair_groups:
            pair_models = self.train_pair(pair, df, automatic_search, models, minimum_score)
            # TODO: Store pair_models
            print(pair)

    @staticmethod
    def train_pair(pair, df, automatic_search, models, minimum_score):
        """
        Function that trains given dataset for a specific pair
        """
        print('Training model for pair:', pair)
        # TODO: Train model
        return pair, None

    @staticmethod
    def load_blueprint(blueprint_file):
        """
        Loads blueprint csv file and returns paired groups (grouped by pair)
        """
        print('Loading dataset')
        df = pd.read_csv(blueprint_file)
        df_pair_groups = df.groupby(['pair'])
        pairs_names = list(df_pair_groups.groups.keys())
        print('Training total of: ', len(pairs_names), 'pairs and ', df.shape[0], 'records')
        return df_pair_groups



